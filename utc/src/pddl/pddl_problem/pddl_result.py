from utc.src.simulator.scenario import Scenario
from utc.src.utils.constants import PATH, get_file_extension, get_file_name, file_exists
from typing import List, Dict


class PddlResult:
    """
    Class interpreting pddl result files generated by planners,
    functions as an interface
    """
    def __init__(self, scenario: Scenario):
        """
        :param scenario: from which pddl result files are parsed
        """
        self.scenario: Scenario = scenario
        assert (self.scenario is not None)
        print(f"Initialized PddlResult class")

    def parse_result(self, result_name: str, *args, **kwargs) -> dict:
        """
        Parses pddl result files, returning dictionary

        :param result_name: name of result file
        :param args: additional arguments
        :param kwargs: additional arguments
        :return:
        """
        raise NotImplementedError("Method 'parse_result' must be implemented by children of PddlResult")

    def results_to_scenario(self, new_scenario: str, *args, **kwargs) -> None:
        """
        Converts folder containing pddl result files to '.sumocfg' file (in case
        of more types -> e.g. ".1.pddl", ".2.pddl" creates multiple '_type.sumocfg' files,
        where types does not contain ".pddl")

        :param new_scenario: name of new scenario to generate
        :param args: additional arguments
        :param kwargs: additional arguments
        :return: None
        """
        raise NotImplementedError("Method 'results_to_scenario' must be implemented by children of PddlResult")

    # ------------------------------------------- Utils -------------------------------------------

    def group_result_files(self, result_files: List[str]) -> Dict[str, List[str]]:
        """
        :param result_files: list of pddl result files names
        :return: Dictionary mapping extension to pddl result file names,
        empty extension is used for ".pddl" (since all files must be of type
        ".pddl")
        """
        # Check all result files for multiple extension, group them by extension
        # Happens when using planner Cerberus (adds ".1", ".2" extensions to files)
        file_extensions: Dict[str, List[str]] = {
            # extension : [file1, ....]
        }
        for result_file in result_files:
            # Expecting all files to be '.pddl'
            assert (result_file.endswith(".pddl"))
            extension: str = "".join(get_file_extension(result_file)).replace(".pddl", "")
            file_name: str = get_file_name(result_file)
            if extension not in file_extensions:
                file_extensions[extension] = []
            file_extensions[extension].append(file_name)
        return file_extensions
