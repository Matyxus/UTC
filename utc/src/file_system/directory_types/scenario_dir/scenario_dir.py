from utc.src.file_system.directory_types.scenario_dir.scenario_map_dir import ScenarioMapDir
from utc.src.file_system.directory_types.scenario_dir.pddl_dir import PddlDir
from utc.src.file_system.directory_types.scenario_dir.simulation_dir import SimulationDir
from utc.src.file_system.directory_types.default_dir import DefaultDir
from utc.src.file_system.file_constants import DirPaths, FileExtension
from utc.src.file_system.file_types import SumoRoutesFile
from typing import List


class ScenarioDir(DefaultDir):
    """
    Class representing entire directory of scenario, has 6 sub-directories:\n
    1 - problems_dir (containing '.pddl' problem directories)\n
    2 - results_dir (containing '.pddl' result directories)\n
    3 - simulation_dir (representing directory of simulation files)\n
    4 - map_dir (representing directory of map files)\n
    5 - routes_dir (containing '.rou.xml' files)\n
    6 - planner_out_dir (containing '?' files generated by planner)
    """
    def __init__(self, scenario_name: str):
        """
        :param scenario_name: name of scenario folder
        """
        super().__init__(scenario_name, DirPaths.SCENARIO)
        self.problems_dir: PddlDir = PddlDir(scenario_name, DirPaths.PDDL_PROBLEMS)
        self.results_dir: PddlDir = PddlDir(scenario_name, DirPaths.PDDL_RESULTS)
        self.simulation_dir: SimulationDir = SimulationDir(scenario_name)
        self.map_dir: ScenarioMapDir = ScenarioMapDir(scenario_name)
        self.routes_dir: DefaultDir = DefaultDir(
            scenario_name, DirPaths.SCENARIO_ROUTES,
            FileExtension.SUMO_ROUTES, SumoRoutesFile
        )
        self.planner_out_dir: DefaultDir = DefaultDir(scenario_name, DirPaths.SCENARIO_PLANNER_OUTS)
        # self.session_report:

    def initialize_dir_structure(self, default: bool = False) -> bool:
        """
        :param default: true if only scenario folder, simulation sub-directory and
        routes sub-directory should be initialized, False by default
        :return: true on success, false otherwise
        """
        to_initialize: List[DefaultDir] = [
            self, self.problems_dir, self.results_dir,
            self.map_dir, self.routes_dir, self.planner_out_dir
        ]
        if default:
            to_initialize = [self, self.routes_dir]
        for directory in to_initialize:
            if directory is None:
                print(f"Cannot initialize directory of type 'None' !")
                return False
            if not directory.initialize_dir():
                return False
        return self.simulation_dir.initialize_dir_structure()


if __name__ == "__main__":
    temp: ScenarioDir = ScenarioDir("test")
    print(temp.problems_dir.get_files(full_path=True))


