from utc.src.file_system.directory_types import DefaultDir, ScenarioDir
from utc.src.file_system import (
    FilePaths, DirPaths, FileExtension, MyFile,
    SumoConfigFile, SumoRoutesFile, StatisticsFile, InfoFile
)
from typing import Optional


class Scenario:
    """
    Class representing scenario, holds associated files/directories:\n
    - *pddl problem/result directory'\n
    - *statistics file '.stat.xml'\n
    - routes file '.rou.xml'\n
    - config file '.sumocfg'\n
    - *info file '.info'\n
    Items denoted as '*' are optional, all scenarios are located in
    directory (if named the same way as routes and config files, it was created
    by generating new scenario, otherwise it was generated by converting '.pddl'
    result files into scenario)
    """

    def __init__(self, scenario_name: str, scenario_folder: str = "", create_new: bool = True):
        """
        :param scenario_name: name of associated files for scenario,
        such as '.sumocfg', '.rou.xml', etc.., (if none, same as scenario_name)
        :param scenario_folder: name of scenario folder
        :param create_new: if new scenario should be created (load
        config file and routes file with template files)
        """
        self.name: str = scenario_name
        self.scenario_folder: str = scenario_folder if scenario_folder else scenario_name
        self.problems_dir: Optional[DefaultDir] = None
        self.results_dir: Optional[DefaultDir] = None
        self.config_file: Optional[SumoConfigFile] = None  # ".sumocfg" file
        self.routes_file: Optional[SumoRoutesFile] = None  # ".rou.xml" file
        self.statistics_file: Optional[StatisticsFile] = None  # ".stat.xml" file
        self.info_file: Optional[InfoFile] = None  # ".info" file
        self.load(create_new)

    def exists(self, message: bool = False) -> bool:
        """
        Scenarios exists, if its folder does exist and
        routes ('.rou.xml') and config ('.sumocfg') files exist

        :param message: true if message about missing file/folder
        should be printed, default false
        :return: true if scenario exists, false otherwise
        """
        if not DefaultDir.dir_exist(DirPaths.SCENARIO.format(self.scenario_folder), message=message):
            return False
        elif self.config_file is None or not self.config_file.file_exists(self.config_file, message=message):
            return False
        return self.routes_file is None or self.routes_file.file_exists(self.routes_file, message=message)

    def load(self, create_new: bool = True) -> None:
        """
        :param create_new: if new scenario should be created (loads
        config file and routes file with template files)
        """
        # Associated directories with scenario
        self.problems_dir = DefaultDir(
            self.name, DirPaths.PDDL_PROBLEMS.format(self.scenario_folder),
            extension=FileExtension.PDDL, file_type=MyFile
        )
        self.results_dir = DefaultDir(
            self.name, DirPaths.PDDL_RESULTS.format(self.scenario_folder),
            extension=FileExtension.PDDL, file_type=MyFile
        )
        # Associated files with scenario
        self.info_file = InfoFile(FilePaths.SCENARIO_INFO.format(self.scenario_folder, self.name))
        self.statistics_file = StatisticsFile(FilePaths.SCENARIO_STATISTICS.format(self.scenario_folder, self.name))
        if create_new:  # Load templates
            self.config_file = SumoConfigFile(FilePaths.SUMO_CONFIG_TEMPLATE)
            self.routes_file = SumoRoutesFile(FilePaths.SUMO_ROUTES_TEMPLATE)
        else:  # Load existing (doesnt have to exist)
            self.config_file = SumoConfigFile(FilePaths.SCENARIO_CONFIG.format(self.scenario_folder, self.name))
            self.routes_file = SumoRoutesFile(FilePaths.SCENARIO_ROUTES.format(self.scenario_folder, self.name))

    def save(self, with_directory: bool = False) -> bool:
        """
        Creates '.rou.xml' file containing vehicle types, routes, individual vehicles.
        Creates '.sumocfg' file that launches simulation in SUMO GUI (expecting
        xml element "net-file" and "routes-file" to be set before saving)


        :param with_directory: initializes scenario directory
        structure (default one) if true, false by default
        :return: true on success, false otherwise
        """
        # Initialize directory
        if with_directory:
            scenario_dir: ScenarioDir = ScenarioDir(self.scenario_folder)
            if not scenario_dir.initialize_dir_structure(default=True):
                print(f"Error at initializing scenario directory structure: {self.scenario_folder}")
                return False
        print(f"Saving scenario: {self.name}")
        # Check
        if self.routes_file is None or self.config_file is None:
            print(f"Load scenario first, routes and/or config are 'None'!")
            return False
        # Create "scenario_routes.rou.xml"
        if not self.routes_file.save(FilePaths.SCENARIO_ROUTES.format(self.scenario_folder, self.name)):
            print(f"Error at creating '{FilePaths.SCENARIO_ROUTES.format(self.scenario_folder, self.name)}' file.")
            return False
        # Create ".sumocfg" (executable)
        elif not self.config_file.save(FilePaths.SCENARIO_CONFIG.format(self.scenario_folder, self.name)):
            print(f"Error at creating '{FilePaths.SCENARIO_CONFIG.format(self.scenario_folder, self.name)} file.")
            return False
        print(f"Scenario: '{self.name}' created successfully")
        return True


# For testing purposes
if __name__ == "__main__":
    temp: Scenario = Scenario("test_planned", "test", False)
    print(temp.problems_dir.path)
    print(temp.problems_dir.dir_exist(temp.problems_dir.path))
    print(temp.problems_dir.get_files())


