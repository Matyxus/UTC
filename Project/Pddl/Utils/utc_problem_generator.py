from Project.Simplify.components import Graph, Skeleton
from Project.Traci.scenarios.generators import RoutesGenerator
from Project.Pddl.Domain import PddlProblem, UtcProblem
from Project.Utils.constants import PATH, dir_exist
from typing import Optional


class UtcProblemGenerator:
    """ Class which converts files generated by planner to simulation ('.sumocfg') """
    def __init__(self, graph: Graph, route_generator: RoutesGenerator):
        self.graph: Graph = graph
        self.route_generator: RoutesGenerator = route_generator
        self.generator: Optional[PddlProblem] = None

    def generate_utc_problem(self, scenario_name: str, window: int = 20) -> None:
        """
        Generates '.pddl' problem file with UtcProblem class.

        :param scenario_name: name of scenario
        :param window: planning window time (seconds) corresponding to each pddl problem time
        frame in simulation (fist problem is generated from time: 0-window, second from time: window-window*2, ...)
        :return: None
        """
        print(f"Generating '.pddl' problem files for UTC domain")
        if self.graph is None or self.route_generator is None:
            print(f"Graph or RouteGenerator is None!")
            return
        elif not dir_exist(PATH.TRACI_SCENARIOS.format(scenario_name) + "/problems"):
            return
        self.generator = UtcProblem()
        self.generator.add_network(self.graph.skeleton, extended=True)
        last_vehicle_depart: int = self.route_generator.get_end_time()
        # How many files will be generated
        interval: int = max((int(last_vehicle_depart / window) + (last_vehicle_depart % window > 0)), 1)
        start_time: int = 0
        end_time: int = window
        for _ in range(interval):
            problem_name: str = f"problem{start_time}_{end_time}"
            print(f"Generating: {problem_name}.pddl")
            self.generator.init_pddl_attributes()  # Also clears/resets vehicle mapping
            self.generator.set_problem_name(problem_name)
            # TODO check if there are too many vehicles -> divide problem into more files
            # Add vehicles
            for vehicle_id, junctions in self.route_generator.get_vehicles(start_time, end_time).items():
                self.generator.add_car(vehicle_id, junctions[0], junctions[1])
            self.generator.save(PATH.TRACI_SCENARIOS_PROBLEMS.format(scenario_name, problem_name))
            # Move time
            start_time += window
            end_time += window
        self.generator = None
        print("Finished generating '.pddl' problem files")


# For testing purposes
if __name__ == "__main__":
    graph: Graph = Graph(Skeleton())
    graph.loader.load_map("test")
    graph.simplify.simplify_graph()
    route_generator: RoutesGenerator = RoutesGenerator(routes_path=PATH.TRACI_ROUTES.format("test3", "routes"))
    temp: UtcProblemGenerator = UtcProblemGenerator(graph, route_generator)
    temp.generate_utc_problem("test3")
    # TODO reset predicates for "(= (total-cost) 0)"



